}
x=0
fun() <- function(x) {
ls(envir = sys.frame(x))
}
a <- fun(0)
x=0
fun <- function(x) {
ls(envir = sys.frame(x))
}
x=0
fun <- function(x) {
ls(envir = sys.frame(x))
}
fix(a)
a <- fun(0)
sapply(0, fun)
sapply(2, fun)
sapply(3, fun)
library(stringr)
text <- scan("Shakespeare.txt", character(0), quote = NULL, sep = "\t")
start <- as.integer(grep("^[[:digit:]]{4}", text, perl = TRUE))
end <- as.integer(grep("THE END", text, perl = TRUE))
len_s <- length(start)
#places each play into a list
plays <- list()
for (i in 2:(len_s-1)) {
plays[[i-1]] <- text[start[i]:end[i]]
}
plays[[4]] <- NULL #this removes the fourth play which is problematic
len_p <-length(plays)
#places the year into a vector
year <- c()
for (i in 1:len_p) {
year[i] <- as.integer(plays[[i]][[1]])
}
#places the title into a vector
title <- c()
for (i in 1:len_p) {
title[i] <- as.character(plays[[i]][[2]])
}
#this function finds all of the acts and scenes
acts <- c()
findActs <- function(x) {
numActsTmp <- (grep("^ACT", plays[[x]], perl = TRUE, ignore.case = TRUE))
len_a <- length(numActsTmp)
for (i in 1:len_a) {
acts[i] <- as.character(plays[[x]][[numActsTmp[i]]])
}
return(acts)
}
#count the number of acts and scenes for each play. Counting the number of times scene 1
#occurs provides the number of Acts. Counting the number of time Act appears provides the
#number of scenes
numScenes <- c()
numActs <- c()
for (i in 1:len_p) {
tmp <- findActs(i)
numActs[i] <- length(grep("Scene 1|Scene I|(?<=\\SC_)([1]$)",tmp, perl = TRUE, ignore.case = TRUE))
numScenes[i] <- length(tmp)
}
#find their chunks of speech
tmp_chunks <- c()
findChunks <- function(x) {
tmp_chunks <- grep("^([[:space:]]{2,}+[[:upper:]]{4,30}\\.)", plays[[x]], perl = TRUE, ignore.case = TRUE)
return(tmp_chunks)
}
chunks <- list()
for (i in 1:length(plays)) {
chunks[[i]] <- findChunks(i);
}
len_chunk <- as.integer(lapply(chunks, length))
#formatting chunks of dialogue and binding lines of speech together
lines <- c()
replace <- c()
aggregate <- c()
findPeople <- function (x) {
for (i in 1:length(chunks[[x]])) {
lines <- plays[[x]][chunks[[x]][[i]]:(chunks[[x]][[i]]-1)]
replace <- str_replace_all(string=lines, pattern="  ", repl="")
aggregate[[i]] <- paste(replace, collapse = ' ')
}
return(aggregate)
}
speech <- list()
for (i in 1:length(plays)) {
speech[[i]] <- findPeople(i)
}
# finding the individual speakers and their chunks of text
#this function places each person into a list, and places each person's spoken text into a list.
unique_Speech <- list()
unique_lines <- list()
len_unique <- c()
len_numPeop <- c()
unique <- list()
unique_peop <- list()
uniqueSpeech <- function(x) {
matches <- gregexpr("^([[:upper:]]{4,20}\\.)", speech[[x]])
names <- regmatches(speech[[x]], matches)
unique <- unique.default(sapply(names, unique))
len_unique <- length(unique)
for (i in 1:len_unique) {
lines <- as.integer(grep(unique[i], speech[[x]], perl = TRUE, ignore.case = TRUE))
unique_lines[[i]] <- speech[[x]][lines[]]
}
result = c(unique_lines,len_unique)
return(result)
}
for (i in 1:length(speech)) {
func <- uniqueSpeech(i)
len_numPeop[i] <- as.integer(func[length(func)])
unique_Speech[[i]] <- func[1:(length(func)-1)]
}
# count the number of words, find the average and standard deviation
word_count <- sapply(gregexpr("\\W+", unique_Speech), length) + 1
word_chunk <- c()
word_avg <- c()
word_sd <- c()
for (i in 1:length(unique_Speech)) {
word_chunk <- sapply(gregexpr("\\W+", unique_Speech[[i]]), length) + 1
word_avg[i] <- sum(word_chunk/length(unique_Speech[[i]]))
word_sd[i] <- sd(word_chunk)
}
df <- data.frame(year,title,numActs,numScenes,len_chunk,len_numPeop, word_count,word_avg,word_sd)
fun <- function(x) {
ls(envir = sys.frame(x))
}
a <- fun(0)
fix(a)
head(a)
sapply(0:3, function(x) {
ls(envir = sys.frame(x))
}
)
a <- fun(0)
head(a)
sapply(0, fun)
sapply(0, fun)
sapply(1, fun)
sapply(1, fun)
sapply(2, fun)
sapply(3, fun)
b <- sapply(0, fun)
View(b)
x <- environment(b)
parent.env(x)
x <- environment(fun)
parent.env(x)
x <- environment(lm)
parent.env(x)
x <- environment(fun(0))
parent.env(x)
x <- environment(fun)
parent.env(x)
parent.env(x)
x <- environment(stringr)
parent.env(x)
x <- environment(package:stringr)
parent.env(x)
x <- environment(str_replace_all)
parent.env(x)
sys.frame(0)
sys.frame(1)
sys.frame(2)
sys.frame(3)
ls(envir = 1)
y <- sys.frame(fun)
sapply(0, fun)
sapply(1, fun)
sapply(2, fun)
sapply(3, fun)
x <- environment(sapply(3,fun))
parent.env(x)
x <- environment(envir = sys.frame(1))
parent.env(x)
x <- environment(sys.frame(1))
parent.env(x)
x <- environment(sys.frame(0))
parent.env(x)
debug(fun, text = "yes", condition = NULL)
a <- fun(0)
c
a <- fun(0)
yes
x <- environment(sys.frame(0))
parent.env(x)
debug(fun, text = "yes", condition = NULL)
c
environmentName()
environmentName(x)
environmentName(fun)
ls(sys.frame)
ls(sys.frame(0))
ls(sys.frame(1))
sapply(0, fun)
c
sapply(1, fun)
c
# original
sapply(0:3, function(x) {
ls(envir = sys.frame(x))
}
)
envir = sys.frame(0)
fix(envir)
envir = sys.frame(1)
envir = sys.frame(12)
envir = sys.frame(2)
envir = sys.frame(0)
library(stringr)
text <- scan("Shakespeare.txt", character(0), quote = NULL, sep = "\t")
start <- as.integer(grep("^[[:digit:]]{4}", text, perl = TRUE))
end <- as.integer(grep("THE END", text, perl = TRUE))
len_s <- length(start)
#places each play into a list
plays <- list()
for (i in 2:(len_s-1)) {
plays[[i-1]] <- text[start[i]:end[i]]
}
plays[[4]] <- NULL #this removes the fourth play which is problematic
len_p <-length(plays)
#places the year into a vector
year <- c()
for (i in 1:len_p) {
year[i] <- as.integer(plays[[i]][[1]])
}
#places the title into a vector
title <- c()
for (i in 1:len_p) {
title[i] <- as.character(plays[[i]][[2]])
}
#this function finds all of the acts and scenes
acts <- c()
findActs <- function(x) {
numActsTmp <- (grep("^ACT", plays[[x]], perl = TRUE, ignore.case = TRUE))
len_a <- length(numActsTmp)
for (i in 1:len_a) {
acts[i] <- as.character(plays[[x]][[numActsTmp[i]]])
}
return(acts)
}
#count the number of acts and scenes for each play. Counting the number of times scene 1
#occurs provides the number of Acts. Counting the number of time Act appears provides the
#number of scenes
numScenes <- c()
numActs <- c()
for (i in 1:len_p) {
tmp <- findActs(i)
numActs[i] <- length(grep("Scene 1|Scene I|(?<=\\SC_)([1]$)",tmp, perl = TRUE, ignore.case = TRUE))
numScenes[i] <- length(tmp)
}
#find their chunks of speech
tmp_chunks <- c()
findChunks <- function(x) {
tmp_chunks <- grep("^([[:space:]]{2,}+[[:upper:]]{4,30}\\.)", plays[[x]], perl = TRUE, ignore.case = TRUE)
return(tmp_chunks)
}
chunks <- list()
for (i in 1:length(plays)) {
chunks[[i]] <- findChunks(i);
}
len_chunk <- as.integer(lapply(chunks, length))
#formatting chunks of dialogue and binding lines of speech together
lines <- c()
replace <- c()
aggregate <- c()
findPeople <- function (x) {
for (i in 1:length(chunks[[x]])) {
lines <- plays[[x]][chunks[[x]][[i]]:(chunks[[x]][[i]]-1)]
replace <- str_replace_all(string=lines, pattern="  ", repl="")
aggregate[[i]] <- paste(replace, collapse = ' ')
}
return(aggregate)
}
speech <- list()
for (i in 1:length(plays)) {
speech[[i]] <- findPeople(i)
}
# finding the individual speakers and their chunks of text
#this function places each person into a list, and places each person's spoken text into a list.
unique_Speech <- list()
unique_lines <- list()
len_unique <- c()
len_numPeop <- c()
unique <- list()
unique_peop <- list()
uniqueSpeech <- function(x) {
matches <- gregexpr("^([[:upper:]]{4,20}\\.)", speech[[x]])
names <- regmatches(speech[[x]], matches)
unique <- unique.default(sapply(names, unique))
len_unique <- length(unique)
for (i in 1:len_unique) {
lines <- as.integer(grep(unique[i], speech[[x]], perl = TRUE, ignore.case = TRUE))
unique_lines[[i]] <- speech[[x]][lines[]]
}
result = c(unique_lines,len_unique)
return(result)
}
for (i in 1:length(speech)) {
func <- uniqueSpeech(i)
len_numPeop[i] <- as.integer(func[length(func)])
unique_Speech[[i]] <- func[1:(length(func)-1)]
}
# count the number of words, find the average and standard deviation
word_count <- sapply(gregexpr("\\W+", unique_Speech), length) + 1
word_chunk <- c()
word_avg <- c()
word_sd <- c()
for (i in 1:length(unique_Speech)) {
word_chunk <- sapply(gregexpr("\\W+", unique_Speech[[i]]), length) + 1
word_avg[i] <- sum(word_chunk/length(unique_Speech[[i]]))
word_sd[i] <- sd(word_chunk)
}
df <- data.frame(year,title,numActs,numScenes,len_chunk,len_numPeop, word_count,word_avg,word_sd)
fun <- function(x) {
ls(envir = sys.frame(x))
}
sapply(0, fun)
sapply(1, fun)
sapply(2, fun)
sapply(3, fun)
# break this down into different parts
fun <- function(x) {
a <-ls(envir = sys.frame(x))
}
# break this down into different parts
fun <- function(x) {
a <-ls(envir = sys.frame(x))
return(a)
}
b <- fun(0)
fix(b)
c <- fun(1)
d <- fun(2)
d <- fun(2)
b <- fun(0)
fix(b)
c <- fun(1)
d <- fun(2)
b <- fun(0)
fix(b)
e <- fun(0)
fix(e)
e[1]
e[[1]]
cat[1]<- fun(0)
cat(1)<- fun(0)
cat <- list()
cat<- fun(0)
fix(cat)
# break this down into different parts
fun <- function(x) {
a <-ls(envir = sys.frame(x))
b <- environmentName(a)
return(b)
}
cat<- fun(0)
x <- environment(sys.frame(0))
parent.env(x)
x <- environment(lm)
parent.env(x)
y <- parent.env(x)
fix(y)
fix(x)
y <- as.character(parent.env(x))
y <- as.string(parent.env(x))
y <- parent.env(x)
y
x
x <- environment(lm)
y <- parent.env(x)
# break this down into different parts
fun <- function(x) {
a <-ls(envir = sys.frame(x))
b <- environment(a)
c <- parent.env(b)
return(c)
}
cat<- fun(0)
# break this down into different parts
fun <- function(x) {
a <-ls(envir = sys.frame(x))
b <- environment(a)
c <- parent.env(a)
return(c)
}
cat<- fun(0)
# break this down into different parts
fun <- function(x) {
a <-ls(envir = sys.frame(x))
b <- environment(a)
c <- parent.env(x)
return(c)
}
cat<- fun(0)
# break this down into different parts
fun <- function(x) {
a <-ls(envir = sys.frame(x))
b <- environment(a)
c <- parent.env(envir = sys.frame(x))
return(c)
}
cat<- fun(0)
fun <- function(x) {
a <-ls(envir = sys.frame(x))
c <- parent.env(sys.frame(x))
return(c)
}
cat<- fun(0)
cat
c <- fun(1)
c
d <- fun(2)
sapply(0, fun)
sapply(1, fun)
sapply(2, fun)
sapply(3, fun)
# original
sapply(0:3, function(x) {
ls(envir = sys.frame(x))
}
)
# break this down into different parts
fun <- function(x) {
ls(envir = sys.frame(x))
c <- parent.env(sys.frame(x))
return(c)
}
a <- sapply(0, fun)
b <- sapply(1, fun)
d <- sapply(2, fun)
e <- sapply(3, fun)
a
b
d
e
head(a)
a
b
c
d
library(knitr)
library(markdown)
system("RMDFILE=Newcomer_PS2")
# Knit the Rmd to an Md file
# Convert the MD file to Html
system("Rscript -e 'require(knitr);require(markdown);knit('$RMDFILE.rmd', '$RMDFILE.md');
markdownToHTML('$RMDFILE.md', '$RMDFILE.html', options=c(\"use_xhml\"))'")
require(knitr)
require(markdown)
knit("Newcomer_PS2.Rmd")
markdownToHTML('Newcomer_PS2.md','Newcomer_PS2.html', options=c("use_xhml"))
# convert the system("pandoc -s myreport.html -o myreport.pdf")
convert the system("pandoc -s Newcomer_PS2.html -o Newcomer_PS2.pdf")
pandoc -s Newcomer_PS2.html -o Newcomer_PS2.pdf
pandoc(-s Newcomer_PS2.html -o Newcomer_PS2.pdf)
pandoc -s Newcomer_PS2.html -o Newcomer_PS2.pdf
a <- sapply(0, fun)
# original
sapply(0:3, function(x) {
ls(envir = sys.frame(x))
}
)
# break this down into different parts
fun <- function(x) {
ls(envir = sys.frame(x))
print(sys.frame(x))
c <- parent.env(sys.frame(x))
return(c)
}
a <- sapply(0, fun)
b <- sapply(1, fun)
d <- sapply(2, fun)
e <- sapply(3, fun)
# break this down into different parts
fun <- function(x) {
ls(envir = sys.frame(x))
print(sys.frame(x))
#c <- parent.env(sys.frame(x))
#return(c)
}
a <- sapply(0, fun)
b <- sapply(1, fun)
d <- sapply(2, fun)
e <- sapply(3, fun)
a
b
d
e
require(knitr)
require(markdown)
knit("Newcomer_PS2.Rmd")
markdownToHTML('Newcomer_PS2.md','Newcomer_PS2.html', options=c("use_xhml"))
pandoc -s Newcomer_PS2.html -o Newcomer_PS2.pdf
system("pandoc -s Newcomer_PS2.html -o Newcomer_PS2.pdf")
system("pandoc -s Newcomer_PS2.html -o Newcomer_PS2.pdf")
require(knitr)
require(markdown)
system("pandoc -s Newcomer_PS2.html -o Newcomer_PS2.pdf")
setwd("D:/Users/Michelle Newcomer/Documents/GitHub/Stat243PSets/PS2")
system("RMDFILE=Newcomer_PS2")
# Knit the Rmd to an Md file
# Convert the MD file to Html
system("Rscript -e 'require(knitr);require(markdown);knit('$RMDFILE.rmd', '$RMDFILE.md');
markdownToHTML('$RMDFILE.md', '$RMDFILE.html', options=c(\"use_xhml\"))'")
require(knitr)
require(markdown)
knit("Newcomer_PS2.Rmd")
markdownToHTML('Newcomer_PS2.md','Newcomer_PS2.html', options=c("use_xhml"))
system("pandoc -s Newcomer_PS2.html -o Newcomer_PS2.pdf")
pandoc -s Newcomer_PS2.html -o Newcomer_PS2.pdf
pandoc linesForR.txt -o test.pdf
