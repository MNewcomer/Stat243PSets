# registerDoMC(nCores) # alternative to registerDoParallel
#
# cl <- startMPIcluster(nCores); registerDoMPI(cl) # when using Rmpi as the back-end
out <- foreach(i = 1:100, .combine = c) %dopar% {
cat('Starting ', i, 'th job.\n', sep = '')
outSub <- taskFun()
cat('Finishing ', i, 'th job.\n', sep = '')
outSub # this will become part of the out object
}
fix(out)
set.seed(1)
n <- 4000
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
nSims <- 60
nCores <- 4
registerDoParallel(nCores)
mat[1]
mat[1,1]
mat[1,]
mat[,1]
mult <- mat[,1] %*% mat[1,]
mnb <- sum(mult)
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 4000
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
nSims <- 60
nCores <- 8
registerDoParallel(nCores)
matMult <- function(mat,i){
mult <- mat[,i] %*% mat[i,]
mn <- sum(mult)
return(mn)
}
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 4000
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
nSims <- 60
matMult <- function(mat,i){
mult <- mat[,i] %*% mat[i,]
mn <- sum(mult)
return(mn)
}
out <- foreach(i = 1:n, .combine = c) %dopar% {
cat('Starting ', i, 'th job.\n', sep = '')
outSub <- matMult(mat, i)
cat('Finishing ', i, 'th job.\n', sep = '')
outSub # this will become part of the out object
}
gc()
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 400
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
nSims <- 60
matMult <- function(mat,i){
for (j in 1:2){
mult <- mat[,i] %*% mat[i,j]
mn[i] <- sum(mult)
}
return(mn)
}
out <- foreach(i = 1:n, .combine = c) %dopar% {
cat('Starting ', i, 'th job.\n', sep = '')
outSub <- matMult(mat, i)
cat('Finishing ', i, 'th job.\n', sep = '')
outSub # this will become part of the out object
}
matMult <- function(mat,i){
for (j in 1:2){
mult <- mat[,i] %*% mat[i,j]
mn[j] <- sum(mult)
}
return(mn)
}
out <- foreach(i = 1:n, .combine = c) %dopar% {
cat('Starting ', i, 'th job.\n', sep = '')
outSub <- matMult(mat, i)
cat('Finishing ', i, 'th job.\n', sep = '')
outSub # this will become part of the out object
}
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 400
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
nSims <- 60
for (j in 1:2){
mult <- mat[,1] %*% mat[1,j]
mn[j] <- sum(mult)
}
for (j in 1:2){
mult <- mat[1,] %*% mat[j,]
mn[j] <- sum(mult)
}
mn <- c()
for (j in 1:2){
mult <- mat[1,] %*% mat[j,]
mn[j] <- sum(mult)
}
fix(mn)
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 40
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
nSims <- 60
mn <- matrix(data=NA, nrow = n, ncol = 2) # initialize points
matMult <- function(mat,i){
for (j in 1:2){
mult <- mat[i,] %*% mat[j,]
mn[j,i] <- sum(mult)
}
return(mn)
}
out <- foreach(i = 1:n, .combine = c) %dopar% {
cat('Starting ', i, 'th job.\n', sep = '')
outSub <- matMult(mat, i)
cat('Finishing ', i, 'th job.\n', sep = '')
outSub # this will become part of the out object
}
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 40
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
nSims <- 60
mn <- matrix(data=NA, nrow = n, ncol = n) # initialize points
matMult <- function(mat,i){
for (j in 1:2){
mult <- mat[i,] %*% mat[j,]
mn[j,i] <- sum(mult)
}
return(mn)
}
out <- foreach(i = 1:n, .combine = c) %dopar% {
cat('Starting ', i, 'th job.\n', sep = '')
outSub <- matMult(mat, i)
cat('Finishing ', i, 'th job.\n', sep = '')
outSub # this will become part of the out object
}
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 40
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
nSims <- 60
mn <<- matrix(data=NA, nrow = n, ncol = n) # initialize points
matMult <- function(mat,i){
for (j in 1:2){
mult <- mat[i,] %*% mat[j,]
mn[j,i] <- sum(mult)
}
return(mn)
}
out <- foreach(i = 1:n, .combine = c) %dopar% {
cat('Starting ', i, 'th job.\n', sep = '')
outSub <- matMult(mat, i)
cat('Finishing ', i, 'th job.\n', sep = '')
outSub # this will become part of the out object
}
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 40
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
nSims <- 60
mn <<- matrix(data=NA, nrow = n, ncol = n) # initialize points
matMult <- function(mat,i, mn){
for (j in 1:2){
mult <- mat[i,] %*% mat[j,]
mn[j,i] <<- sum(mult)
}
return(mn)
}
out <- foreach(i = 1:n, .combine = c) %dopar% {
cat('Starting ', i, 'th job.\n', sep = '')
outSub <- matMult(mat, i, mn)
cat('Finishing ', i, 'th job.\n', sep = '')
outSub # this will become part of the out object
}
View(mn)
View(mat)
mat[1,]
mat[,j]
mat[,1]
mat[1,]*mat[,2]
sum(mat[1,]*mat[,2])
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 40
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
nSims <- 60
mn <- matrix(data=NA, nrow = n, ncol = n) # initialize points
matMult <- function(mat,i, mn){
for (j in 1:n){
mult <- mat[i,] * mat[,j]
mn[i,j] <<- sum(mult)
}
return(mn)
}
out <- foreach(i = 1:n, .combine = c) %dopar% {
cat('Starting ', i, 'th job.\n', sep = '')
outSub <- matMult(mat, i, mn)
cat('Finishing ', i, 'th job.\n', sep = '')
outSub # this will become part of the out object
}
warnings()
head(out)
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 40
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
nSims <- 60
mn <- matrix(data=NA, nrow = n, ncol = n) # initialize points
for (j in 1:n){
mult <- mat[1,] * mat[,j]
mn[1,j] <<- sum(mult)
}
mn <- c()
for (j in 1:n){
mult <- mat[1,] * mat[,j]
mn[1,j] <<- sum(mult)
}
mn <- c()
for (j in 1:n){
mult <- mat[1,] * mat[,j]
mn[j] <- sum(mult)
}
fix(mn)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 40
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
nSims <- 60
for (j in 1:n){
mult <- mat[1,] * mat[,j]
mn[1,j] <- sum(mult)
}
mn <- matrix(data=NA, nrow = n, ncol = n) # initialize points
mn(1,1)
mn[1,1]
for (j in 1:n){
mult <- mat[1,] * mat[,j]
mn[1,j] <- sum(mult)
}
View(mn)
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 40
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
mn <- matrix(data=NA, nrow = n, ncol = n) # initialize points
matMult <- function(mat,i, mn){
for (j in 1:n){
mult <- mat[i,] * mat[,j]
mn[i,j] <- sum(mult)
}
return(mn)
}
out <- foreach(i = 1:n, .combine = c) %dopar% {
cat('Starting ', i, 'th job.\n', sep = '')
outSub <- matMult(mat, i, mn)
cat('Finishing ', i, 'th job.\n', sep = '')
outSub # this will become part of the out object
}
warnings()
View(mn)
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 40
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
mn <- matrix(data=NA, nrow = n, ncol = n) # initialize points
matMult <- function(mat,i){
for (j in 1:n){
mult <- mat[i,] * mat[,j]
mn[i,j] <- sum(mult)
}
return(mn)
}
out <- foreach(i = 1:n, .combine = c) %dopar% {
cat('Starting ', i, 'th job.\n', sep = '')
outSub <- matMult(mat, i)
cat('Finishing ', i, 'th job.\n', sep = '')
outSub # this will become part of the out object
}
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 40
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
mn <- matrix(data=NA, nrow = n, ncol = n) # initialize points
matMult <- function(mat,i, mn){
for (j in 1:n){
mult <- mat[i,] * mat[,j]
mn[i,j] <<- sum(mult)
}
return(mn)
}
out <- foreach(i = 1:n, .combine = c) %dopar% {
cat('Starting ', i, 'th job.\n', sep = '')
outSub <- matMult(mat, i, mn)
cat('Finishing ', i, 'th job.\n', sep = '')
outSub # this will become part of the out object
}
head(out)
tail(out)
View(mn)
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 40
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
mn <- matrix(data=NA, nrow = n, ncol = n) # initialize points
matMult <- function(mat,i, mn){
for (j in 1:n){
mult <- mat[i,] * mat[,j]
mn[i,j] <<- sum(mult, na.exclude=TRUE)
}
return(mn[i,])
}
out <- foreach(i = 1:n, .combine = c) %dopar% {
cat('Starting ', i, 'th job.\n', sep = '')
outSub <- matMult(mat, i, mn)
cat('Finishing ', i, 'th job.\n', sep = '')
outSub # this will become part of the out object
}
View(mn)
head(out)
tail(out)
length(out)
length(out)/n
finalMat <- matrix(out,length(out)/n,byrow=T)
View(finalMat)
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 40
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
mn <- matrix(data=NA, nrow = n, ncol = n) # initialize points
matMult <- function(mat,i, mn){
for (j in 1:n){
mult <- mat[i,] * mat[,j]
mn[i,j] <<- sum(mult, na.exclude=TRUE)
}
return(mn[i,])
}
out <- foreach(i = 1:n, .combine = c) %dopar% {
cat('Starting ', i, 'th job.\n', sep = '')
outSub <- matMult(mat, i, mn)
cat('Finishing ', i, 'th job.\n', sep = '')
outSub # this will become part of the out object
}
finalMat <- matrix(out,length(out)/n,byrow=T)
system.time(out)
warning
warnings
warnings()
require(parallel) # one of the core R packages
require(doParallel)
# require(multicore); require(doMC) # alternative to parallel/doParallel
# require(Rmpi); require(doMPI) # when Rmpi is available as the back-end
require(foreach)
library(foreach)
library(iterators)
set.seed(1)
n <- 40
nCores <- 8
registerDoParallel(nCores)
mat <- matrix(rnorm(n^2), nrow = n, ncol = n) # positions
mn <- matrix(data=NA, nrow = n, ncol = n) # initialize points
matMult <- function(mat,i, mn){
for (j in 1:n){
mult <- mat[i,] * mat[,j]
mn[i,j] <<- sum(mult, na.exclude=TRUE)
}
return(mn[i,])
}
system.time(out <- foreach(i = 1:n, .combine = c) %dopar% {
outSub <- matMult(mat, i, mn)
outSub # this will become part of the out object
}
)
finalMat <- matrix(out,length(out)/n,byrow=T)
require(knitr)
require(markdown)
filen <- "Newcomer_PS3"
knit(paste0(filen,".Rmd"))
system(paste0("pandoc -s ", paste0(filen,".md"), " -t latex -V geometry:margin=1in -o ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
filen <- "Newcomer_PS3"
knit(paste0(filen,".Rmd"))
system(paste0("pandoc -s ", paste0(filen,".md"), " -t latex -V geometry:margin=1in -o ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s ", paste0(filen,".md"), " -t latex -V geometry:margin=1in -o ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
